name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

env:
  BUILD_TYPE: Release

jobs:
  # Remove build-and-package job and all references to it

  create-release:
    needs: test-universal-wheel
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4
    - name: Download all package artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          artifacts/**/linux-x64-deb
          artifacts/**/linux-x64-rpm
          artifacts/**/linux-x64-tar
          artifacts/**/linux-arm64-deb
          artifacts/**/linux-arm64-rpm
          artifacts/**/linux-arm64-tar
          artifacts/**/macos-arm64-tar
          artifacts/**/windows-x64-installer
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-manual-release:
    needs: test-universal-wheel
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
    - uses: actions/checkout@v4
    - name: Download all package artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.tag }}
        name: Release ${{ github.event.inputs.tag }}
        draft: true
        prerelease: false
        generate_release_notes: true
        files: |
          artifacts/**/linux-x64-deb
          artifacts/**/linux-x64-rpm
          artifacts/**/linux-x64-tar
          artifacts/**/linux-arm64-deb
          artifacts/**/linux-arm64-rpm
          artifacts/**/linux-arm64-tar
          artifacts/**/macos-arm64-tar
          artifacts/**/windows-x64-installer
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-universal-wheel:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all native lib artifacts
        uses: actions/download-artifact@v4
        with:
          path: native-libs/

      - name: Prepare native libs for wheel
        run: |
          mkdir -p bindings/python/omega_match/native/lib
          cp native-libs/native-lib-linux-x64/libomega_match-linux-x64.so bindings/python/omega_match/native/lib/ || true
          cp native-libs/native-lib-linux-arm64/libomega_match-linux-arm64.so bindings/python/omega_match/native/lib/ || true
          cp native-libs/native-lib-windows-x64/libomega_match-windows-x64.dll bindings/python/omega_match/native/lib/ || true
          cp native-libs/native-lib-macos-arm64/libomega_match-macos-arm64.dylib bindings/python/omega_match/native/lib/ || true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install build

      - name: Build universal wheel
        run: |
          cd bindings/python
          python -m build --wheel

      - name: Upload universal wheel
        uses: actions/upload-artifact@v4
        with:
          name: omega_match-universal-wheel
          path: bindings/python/dist/*.whl
          retention-days: 7

  test-universal-wheel:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download universal wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: omega_match-universal-wheel
          path: dist/

      - name: Install wheel and test dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install dist/*.whl pytest pytest-cov

      - name: Run Python tests against installed wheel
        run: |
          pytest --pyargs omega_match
