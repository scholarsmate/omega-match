name: CI Build and Test

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false ensuring that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Test cross-platform compatibility
      # 1. <Windows, x64, MSVC>
      # 2. <Linux, x64, GCC>
      # 3. <Linux, arm64, GCC>
      # 4. <macOS, arm64, Clang>
      matrix:
        include:
          # Windows (MSVC)
          - os: windows-latest
            arch: x64
            build_type: Release
            generator: "Visual Studio 17 2022"
            cmake_args: ""
            name: "Windows-MSVC"
          # Windows (MSVC PGO)
          - os: windows-latest
            arch: x64
            build_type: Release
            generator: "Visual Studio 17 2022"
            cmake_args: ""
            name: "Windows-MSVC-PGO"
            pgo: true
          # Ubuntu GCC
          - os: ubuntu-latest
            arch: x64
            build_type: Release
            c_compiler: gcc
            cpp_compiler: g++
            cmake_args: ""
            name: "Linux-GCC"
          # Ubuntu GCC PGO
          - os: ubuntu-latest
            arch: x64
            build_type: Release
            c_compiler: gcc
            cpp_compiler: g++
            cmake_args: ""
            name: "Linux-GCC-PGO"
            pgo: true
          # Ubuntu Clang PGO
          - os: ubuntu-latest
            arch: x64
            build_type: Release
            c_compiler: clang
            cpp_compiler: clang++
            cmake_args: ""
            name: "Linux-Clang-PGO"
            pgo: true
          # Linux ARM64 (native)
          - os: ubuntu-24.04-arm
            arch: arm64
            build_type: Release
            c_compiler: gcc
            cpp_compiler: g++
            cmake_args: ""
            name: "Linux-ARM64"
          # macOS Clang
          - os: macos-latest
            arch: arm64
            build_type: Release
            c_compiler: clang
            cpp_compiler: clang++
            cmake_args: ""
            name: "macOS-Clang"

    steps:
    - uses: actions/checkout@v4

    - name: Fetch all git tags
      run: git fetch --tags --force

    - name: Set UTF-8 encoding (Windows)
      if: runner.os == 'Windows'
      run: chcp 65001
      shell: cmd
      
    - name: Set PYTHONIOENCODING
      run: echo "PYTHONIOENCODING=utf-8" >> $GITHUB_ENV

    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential ninja-build libomp-dev rpm
        # Install LLVM tools for Clang PGO
        if [[ "${{ matrix.c_compiler }}" == "clang" && "${{ matrix.pgo }}" == "true" ]]; then
          sudo apt-get install -y llvm
        fi

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install libomp

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install Python modules
      run: |
        python -m pip install --upgrade pip
        python -m pip install build cffi pytest pytest-cov

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          if [ "${{ matrix.pgo }}" = "true" ]; then
            # PGO configuration will be handled by the PGO workflow script
            echo "PGO build - configuration handled by pgo_workflow.py"
          else
            cmake --preset release -DPython3_EXECUTABLE=$(which python)
          fi
        elif [ "${{ matrix.os }}" = "ubuntu-24.04-arm" ]; then
          cmake --preset release -DPython3_EXECUTABLE=$(which python)
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          cmake --preset macos-release -DPython3_EXECUTABLE=$(which python)
        else
          if [ "${{ matrix.pgo }}" = "true" ]; then
            # PGO configuration will be handled by the PGO workflow script
            echo "PGO build - configuration handled by pgo_workflow.py"
          else
            cmake -B build -G "${{ matrix.generator }}" -A x64 -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ${{ matrix.cmake_args }} -DPython3_EXECUTABLE=$(which python)
          fi
        fi
      shell: bash

    - name: Build
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          if [ "${{ matrix.pgo }}" = "true" ]; then
            # Run unified PGO workflow
            python3 scripts/pgo_workflow.py --compiler ${{ matrix.c_compiler }}
          else
            cmake --build --preset release
          fi
        elif [ "${{ matrix.os }}" = "ubuntu-24.04-arm" ]; then
          cmake --build --preset release
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          cmake --build --preset macos-release
        else
          if [ "${{ matrix.pgo }}" = "true" ]; then
            # Run unified MSVC PGO workflow
            python scripts/pgo_workflow.py --compiler msvc
          else
            cmake --build build --config ${{ matrix.build_type }}
          fi
        fi
      shell: bash

    - name: Test
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          if [ "${{ matrix.pgo }}" = "true" ]; then
            # Test PGO optimized build
            if [ "${{ matrix.c_compiler }}" = "gcc" ]; then
              ctest --test-dir build-gcc-pgo-use --output-on-failure
            else
              ctest --test-dir build-clang-pgo-use --output-on-failure
            fi
          else
            ctest --test-dir build-gcc-release --output-on-failure
          fi
        elif [ "${{ matrix.os }}" = "ubuntu-24.04-arm" ]; then
          ctest --test-dir build-gcc-release --output-on-failure
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          ctest --test-dir build-clang-release --output-on-failure
        else
          if [ "${{ matrix.pgo }}" = "true" ]; then
            ctest --test-dir build-msvc-pgo-use --output-on-failure --build-config ${{ matrix.build_type }}
          else
            ctest --test-dir build --output-on-failure --build-config ${{ matrix.build_type }}
          fi
        fi
      shell: bash

    # PGO validation and performance verification
    - name: Validate PGO Build
      if: matrix.pgo == true
      run: |
        echo "=== PGO Build Validation ==="
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          if [ "${{ matrix.c_compiler }}" = "gcc" ]; then
            echo "Testing GCC PGO optimized binary..."
            ./build-gcc-pgo-use/olm --version
          else
            echo "Testing Clang PGO optimized binary..."
            ./build-clang-pgo-use/olm --version
          fi
        else
          echo "Testing MSVC PGO optimized binary..."
          ./build-msvc-pgo-use/Release/olm.exe --version
        fi
        echo "=== PGO validation complete ==="
      shell: bash

    # Copy native libraries to Python package location for universal wheel
    - name: Copy native library to Python package location (linux-x64)
      if: matrix.os == 'ubuntu-latest' && matrix.pgo != true
      run: |
        mkdir -p bindings/python/omega_match/native/lib
        cp build-gcc-release/libomega_match.so bindings/python/omega_match/native/lib/libomega_match-linux-x64.so

    - name: Copy PGO native library to Python package location (linux-x64-gcc-pgo)
      if: matrix.os == 'ubuntu-latest' && matrix.pgo == true && matrix.c_compiler == 'gcc'
      run: |
        mkdir -p bindings/python/omega_match/native/lib
        cp build-gcc-pgo-use/libomega_match.so bindings/python/omega_match/native/lib/libomega_match-linux-x64-gcc-pgo.so

    - name: Copy PGO native library to Python package location (linux-x64-clang-pgo)
      if: matrix.os == 'ubuntu-latest' && matrix.pgo == true && matrix.c_compiler == 'clang'
      run: |
        mkdir -p bindings/python/omega_match/native/lib
        cp build-clang-pgo-use/libomega_match.so bindings/python/omega_match/native/lib/libomega_match-linux-x64-clang-pgo.so

    - name: Copy native library to Python package location (linux-arm64)
      if: matrix.os == 'ubuntu-24.04-arm'
      run: |
        mkdir -p bindings/python/omega_match/native/lib
        cp build-gcc-release/libomega_match.so bindings/python/omega_match/native/lib/libomega_match-linux-arm64.so

    - name: Copy native library to Python package location (windows-x64)
      if: matrix.os == 'windows-latest' && matrix.pgo != true
      run: |
        mkdir -p bindings/python/omega_match/native/lib
        cp build/Release/omega_match.dll bindings/python/omega_match/native/lib/libomega_match-windows-x64.dll
      shell: bash

      # PGO native library copy for Windows is static only, so there is no dynamic library to copy

    - name: Copy native library to Python package location (macos-arm64)
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p bindings/python/omega_match/native/lib
        cp build-clang-release/libomega_match.dylib bindings/python/omega_match/native/lib/libomega_match-macos-arm64.dylib

    # Only upload artifacts for successful builds (no packaging needed for CI)
    - name: Upload CLI binaries, libraries and PDBs
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}-binary
        path: |
          ${{ (matrix.os == 'ubuntu-latest' && matrix.pgo != true) && 'build-gcc-release/olm' || (matrix.os == 'ubuntu-latest' && matrix.pgo == true && matrix.c_compiler == 'gcc') && 'build-gcc-pgo-use/olm' || (matrix.os == 'ubuntu-latest' && matrix.pgo == true && matrix.c_compiler == 'clang') && 'build-clang-pgo-use/olm' || matrix.os == 'ubuntu-24.04-arm' && 'build-gcc-release/olm' || matrix.os == 'macos-latest' && 'build-clang-release/olm' || (matrix.os == 'windows-latest' && matrix.pgo != true) && 'build/Release/olm.exe' || (matrix.os == 'windows-latest' && matrix.pgo == true) && 'build-msvc-pgo-use/Release/olm.exe' }}
          ${{ (matrix.os == 'ubuntu-latest' && matrix.pgo != true) && 'build-gcc-release/libomega_match*' || (matrix.os == 'ubuntu-latest' && matrix.pgo == true && matrix.c_compiler == 'gcc') && 'build-gcc-pgo-use/libomega_match*' || (matrix.os == 'ubuntu-latest' && matrix.pgo == true && matrix.c_compiler == 'clang') && 'build-clang-pgo-use/libomega_match*' || matrix.os == 'ubuntu-24.04-arm' && 'build-gcc-release/libomega_match*' || matrix.os == 'macos-latest' && 'build-clang-release/libomega_match*' || (matrix.os == 'windows-latest' && matrix.pgo != true) && 'build/Release/omega_match*' || (matrix.os == 'windows-latest' && matrix.pgo == true) && 'build-msvc-pgo-use/Release/omega_match*' }}
          ${{ (matrix.os == 'windows-latest' && matrix.pgo != true) && 'build/Release/*.pdb' || (matrix.os == 'windows-latest' && matrix.pgo == true) && 'build-msvc-pgo-use/Release/*.pdb' || '' }}
        retention-days: ${{ startsWith(github.ref, 'refs/tags/') && 30 || 7 }}

    # Upload native library artifacts for universal wheel
    - name: Upload native library artifact (linux-x64)
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x64' && matrix.pgo != true
      uses: actions/upload-artifact@v4
      with:
        name: native-lib-linux-x64
        path: bindings/python/omega_match/native/lib/libomega_match-linux-x64.so
        retention-days: ${{ startsWith(github.ref, 'refs/tags/') && 30 || 7 }}

    # Upload PGO native library artifacts for universal wheel
    - name: Upload native library artifact (linux-x64-gcc-pgo)
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x64' && matrix.pgo == true && matrix.c_compiler == 'gcc'
      uses: actions/upload-artifact@v4
      with:
        name: native-lib-linux-x64-gcc-pgo
        path: bindings/python/omega_match/native/lib/libomega_match-linux-x64-gcc-pgo.so
        retention-days: ${{ startsWith(github.ref, 'refs/tags/') && 30 || 7 }}

    - name: Upload native library artifact (linux-x64-clang-pgo)
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x64' && matrix.pgo == true && matrix.c_compiler == 'clang'
      uses: actions/upload-artifact@v4
      with:
        name: native-lib-linux-x64-clang-pgo
        path: bindings/python/omega_match/native/lib/libomega_match-linux-x64-clang-pgo.so
        retention-days: ${{ startsWith(github.ref, 'refs/tags/') && 30 || 7 }}

    - name: Upload native library artifact (linux-arm64)
      if: matrix.os == 'ubuntu-24.04-arm' && matrix.arch == 'arm64'
      uses: actions/upload-artifact@v4
      with:
        name: native-lib-linux-arm64
        path: bindings/python/omega_match/native/lib/libomega_match-linux-arm64.so
        retention-days: ${{ startsWith(github.ref, 'refs/tags/') && 30 || 7 }}

    - name: Upload native library artifact (windows-x64)
      if: matrix.os == 'windows-latest' && matrix.arch == 'x64' && matrix.pgo != true
      uses: actions/upload-artifact@v4
      with:
        name: native-lib-windows-x64
        path: bindings/python/omega_match/native/lib/libomega_match-windows-x64.dll
        retention-days: ${{ startsWith(github.ref, 'refs/tags/') && 30 || 7 }}

    - name: Upload native library artifact (windows-x64-msvc-pgo)
      if: matrix.os == 'windows-latest' && matrix.arch == 'x64' && matrix.pgo == true
      uses: actions/upload-artifact@v4
      with:
        name: native-lib-windows-x64-msvc-pgo
        path: bindings/python/omega_match/native/lib/libomega_match-windows-x64-msvc-pgo.dll
        retention-days: ${{ startsWith(github.ref, 'refs/tags/') && 30 || 7 }}

    - name: Upload native library artifact (macos-arm64)
      if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
      uses: actions/upload-artifact@v4
      with:
        name: native-lib-macos-arm64
        path: bindings/python/omega_match/native/lib/libomega_match-macos-arm64.dylib
        retention-days: ${{ startsWith(github.ref, 'refs/tags/') && 30 || 7 }}

    - name: Install WiX Toolset
      if: runner.os == 'Windows'
      run: choco install wixtoolset --no-progress

    - name: List build output (Windows standard Release)
      if: runner.os == 'Windows' && matrix.pgo != true
      run: dir build/Release
      shell: pwsh

    - name: List build output (Windows PGO Release)
      if: runner.os == 'Windows' && matrix.pgo == true
      run: dir build-msvc-pgo-use/Release
      shell: pwsh

    - name: Package
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          if [ "${{ matrix.pgo }}" = "true" ]; then
            # Package PGO optimized build
            if [ "${{ matrix.c_compiler }}" = "gcc" ]; then
              cd build-gcc-pgo-use
            else
              cd build-clang-pgo-use
            fi
          else
            cd build-gcc-release
          fi
        elif [ "${{ matrix.os }}" = "ubuntu-24.04-arm" ]; then
          cd build-gcc-release
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          cd build-clang-release
        else
          # Windows packaging
          if [ "${{ matrix.pgo }}" = "true" ]; then
            cd build-msvc-pgo-use
          else
            cd build
          fi
        fi
        # Package for each platform
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cpack -G WIX || true
        elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          cpack -G DEB || true
          cpack -G RPM || true
          cpack -G TGZ || true
        elif [ "${{ matrix.os }}" = "ubuntu-24.04-arm" ]; then
          cpack -G DEB || true
          cpack -G RPM || true
          cpack -G TGZ || true
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          cpack -G TGZ || true
        fi
      shell: bash

    - name: Upload package artifacts
      run: |
        set -e
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          if [ "${{ matrix.pgo }}" = "true" ]; then
            cd build-msvc-pgo-use
          else
            cd build
          fi
          found=0
          for f in *.msi; do
            if [ -e "$f" ]; then
              echo "Found MSI: $f"
              found=1
            fi
          done
          if [ $found -eq 0 ]; then echo "ERROR: No .msi found for Windows!"; exit 1; fi
        elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          if [ "${{ matrix.pgo }}" = "true" ]; then
            if [ "${{ matrix.c_compiler }}" = "gcc" ]; then
              cd build-gcc-pgo-use
            else
              cd build-clang-pgo-use
            fi
          else
            cd build-gcc-release
          fi
          for ext in deb rpm tar.gz; do
            found=0
            for f in *.$ext; do
              if [ -e "$f" ]; then
                echo "Linux x64 CPack output: $f"
                found=1
              fi
            done
            if [ $found -eq 0 ]; then echo "ERROR: No .$ext found for linux-x64!"; exit 1; fi
          done
        elif [ "${{ matrix.os }}" = "ubuntu-24.04-arm" ]; then
          cd build-gcc-release
          for ext in deb rpm tar.gz; do
            found=0
            for f in *.$ext; do
              if [ -e "$f" ]; then
                echo "Linux arm64 CPack output: $f"
                found=1
              fi
            done
            if [ $found -eq 0 ]; then echo "ERROR: No .$ext found for linux-arm64!"; exit 1; fi
          done
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          cd build-clang-release
          found=0
          for f in *.tar.gz; do
            if [ -e "$f" ]; then
              echo "macOS CPack output: $f"
              found=1
            fi
          done
          if [ $found -eq 0 ]; then echo "ERROR: No .tar.gz found for macOS!"; exit 1; fi
        fi
      shell: bash

    - name: Upload DEB package
      if: (matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-24.04-arm')
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os == 'ubuntu-latest' && (matrix.pgo == true && (matrix.c_compiler == 'gcc' && 'linux-x64-gcc-pgo-deb' || 'linux-x64-clang-pgo-deb') || 'linux-x64-deb') || 'linux-arm64-deb' }}
        path: ${{ (matrix.os == 'ubuntu-latest' && matrix.pgo == true && matrix.c_compiler == 'gcc') && 'build-gcc-pgo-use/*.deb' || (matrix.os == 'ubuntu-latest' && matrix.pgo == true && matrix.c_compiler == 'clang') && 'build-clang-pgo-use/*.deb' || (matrix.os == 'ubuntu-latest' && matrix.pgo != true) && 'build-gcc-release/*.deb' || 'build-gcc-release/*.deb' }}
        retention-days: ${{ startsWith(github.ref, 'refs/tags/') && 30 || 7 }}

    - name: Upload RPM package
      if: (matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-24.04-arm')
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os == 'ubuntu-latest' && (matrix.pgo == true && (matrix.c_compiler == 'gcc' && 'linux-x64-gcc-pgo-rpm' || 'linux-x64-clang-pgo-rpm') || 'linux-x64-rpm') || 'linux-arm64-rpm' }}
        path: ${{ (matrix.os == 'ubuntu-latest' && matrix.pgo == true && matrix.c_compiler == 'gcc') && 'build-gcc-pgo-use/*.rpm' || (matrix.os == 'ubuntu-latest' && matrix.pgo == true && matrix.c_compiler == 'clang') && 'build-clang-pgo-use/*.rpm' || (matrix.os == 'ubuntu-latest' && matrix.pgo != true) && 'build-gcc-release/*.rpm' || 'build-gcc-release/*.rpm' }}
        retention-days: ${{ startsWith(github.ref, 'refs/tags/') && 30 || 7 }}

    - name: Upload TGZ package
      if: (matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-24.04-arm' || matrix.os == 'macos-latest')
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os == 'ubuntu-latest' && (matrix.pgo == true && (matrix.c_compiler == 'gcc' && 'linux-x64-gcc-pgo-tar' || 'linux-x64-clang-pgo-tar') || 'linux-x64-tar') || matrix.os == 'ubuntu-24.04-arm' && 'linux-arm64-tar' || 'macos-arm64-tar' }}
        path: ${{ (matrix.os == 'ubuntu-latest' && matrix.pgo == true && matrix.c_compiler == 'gcc') && 'build-gcc-pgo-use/*.tar.gz' || (matrix.os == 'ubuntu-latest' && matrix.pgo == true && matrix.c_compiler == 'clang') && 'build-clang-pgo-use/*.tar.gz' || (matrix.os == 'ubuntu-latest' && matrix.pgo != true) && 'build-gcc-release/*.tar.gz' || matrix.os == 'macos-latest' && 'build-clang-release/*.tar.gz' || 'build-gcc-release/*.tar.gz' }}
        retention-days: ${{ startsWith(github.ref, 'refs/tags/') && 30 || 7 }}

    - name: Upload WIX installer
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.pgo == true && 'windows-x64-msvc-pgo-installer' || 'windows-x64-installer' }}
        path: ${{ matrix.pgo == true && 'build-msvc-pgo-use/*.msi' || 'build/*.msi' }}
        retention-days: ${{ startsWith(github.ref, 'refs/tags/') && 30 || 7 }}
